---
title: FJP Dados
subtitle: Meio Ambiente
description: Relatório contendo uma análise descritiva e os resultados das regras de crítica dos dados da dimensão.
author: 
  name: Coordenação de Indicadores Sociais (CIS)
  affiliation: 
    name: Diretoria de Estatística e Informações (Direi)
    address: Alameda das Acácias, 70 - São Luiz 
    city: Belo Horizonte
    state: Minas Gerais
    postal-code: 31.275-150
    url: https://fjp.mg.gov.br/
lang: pt
date: today
title-block-banner: "#68bb59"
title-block-banner-color: "#ffffff"
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    toc: true
    toc-location: left
    toc-title: MENU
    linkcolor: "#68bb59"
    css: css/all_custom.css
    theme:
      light: [flatly, css/ma_custom.scss]
editor: visual
execute:
  echo: false
  warning: false
  error: false
  message: false
params:
  data: file.xlsx
output-file: "ma_relatorio.html"
---

```{r source_functions}

# source(sistem.file("R", "aux_functions.R"), package = "criticaldatafjp")
source(here::here("R", "aux_functions.R"))
```

```{r set_param_global}

k <- 1.5 

## "Truque" para setar "k" como uma constante
lockBinding("k", globalenv())

## Parâmetros para os gráficos do validate::
chart_title <- "Resultado das validações por regra estabelecida"
chart_label <- c("Erros", "Sucessos", "Ausentes", "Total")
chart_palette <- c("#ff985a", "#9fc0de", "#cccccc")
chart_xlab <- ""
```

```{r import_data}

data <- openxlsx::read.xlsx(params$data)
```

```{r get_var_numeric}

# Obter as siglas das variáveis do tipo numérico
var_numeric <- data |> 
  dplyr::select(
    !c("CHAVE", "IBGE6", "IBGE7", "ANO") & dplyr::where(is.numeric)
  ) |> 
  colnames() |> 
  unlist()
```

```{r get_var_character}

# Obter as siglas variáveis do tipo string
var_char <- data |> 
  dplyr::select(
    !c("CHAVE", "IBGE6", "IBGE7", "ANO") & dplyr::where(is.character)
  ) |> 
  colnames() |> 
  unlist()
```

# Introdução

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sollicitudin, metus nec rhoncus posuere, leo dolor auctor neque, ut consectetur massa sem et nibh. Vivamus aliquam arcu sed ligula tincidunt, vel iaculis felis accumsan. Fusce in pellentesque erat. In vel euismod justo. Suspendisse imperdiet nulla eget dolor ornare, in viverra massa congue. Suspendisse nec vestibulum lectus. Phasellus venenatis vel turpis ut finibus. Vivamus vehicula neque sem, at ullamcorper magna finibus at. Praesent pulvinar, enim id pellentesque ultricies, magna nibh suscipit magna, at viverra dolor neque vel dolor. Quisque vestibulum orci et ex pharetra, vitae feugiat nulla sollicitudin. Suspendisse posuere aliquet.

# Regras de crítica

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sollicitudin, metus nec rhoncus posuere, leo dolor auctor neque, ut consectetur massa sem et nibh. Vivamus aliquam arcu sed ligula tincidunt, vel iaculis felis accumsan. Fusce in pellentesque erat. In vel euismod justo. Suspendisse imperdiet nulla eget dolor ornare, in viverra massa congue. Suspendisse nec vestibulum lectus. Phasellus venenatis vel turpis ut finibus. Vivamus vehicula neque sem, at ullamcorper magna finibus at. Praesent pulvinar, enim id pellentesque ultricies, magna nibh suscipit magna, at viverra dolor neque vel dolor. Quisque vestibulum orci et ex pharetra, vitae feugiat nulla sollicitudin. Suspendisse posuere aliquet.

-   Tipo

    -   **TI\_\[...\]**: tipo do dado está de acordo com o esperado (numérico, textual ou categórico).

-   Validade

    -   **VI\_\[...\]**: dado é não negativo e/ou está entre um intervalo estipulado (ex.: 0% e 100%).

-   Consistência

    -   **CF\_\[...\]\_prop**: ???

    -   **CF\_\[...\]\_total**: a soma da proporção é igual a $\approx$ 100%.

-   Distribuição

    -   **DF\_\[...\]\_hampel_munic**: identificação de um possível valor *outlier* na série histórica;

    -   **DF\_\[...\]\_out_munic**: segundo método de identificação de um possível valor *outlier* na série histórica;

    -   **DF\_\[...\]\_min_munic**: o valor mais recente é maior ou igual ao menor / k valor da série histórica;

    -   **DF\_\[...\]\_max_munic**: o valor mais recente é menor ou igual ao maior \* k valor da série histórica;

    -   **DF\_\[...\]\_med_mov_munic:** o valor atual é menor ou igual a mediana móvel \* k;

    -   **DF\_\[...\]\_dif_munic**: o valor mais recente da primeira diferença é menor ou igual ao maior valor da primeira diferença da série histórica;

    -   **DF\_\[...\]\_compare**: ???

```{r get_cat}

## Categorias encontradas na série histórica
org_gestor <- c(
  "Departamento, assessoria, setor ou órgão similar",
  "Não possui estrutura",
  "Não possui estrutura para a área",
  "Órgão da administração indireta",
  "Secretaria em conjunto com outra política",
  "Secretaria em conjunto com outras políticas setoriais",
  "Secretaria exclusiva",
  "Secretaria municipal em conjunto com outras políticas",
  "Secretaria municipal em conjunto com outros temas",
  "Secretaria municipal exclusiva",
  "Setor subordinado a outra secretaria",
  "Setor subordinado diretamente à chefia do executivo"
)
```

### Tipo

#### Todos os indicadores

```{r rules_type}
  
rules_type <- validate::validator(
    TI_MA_AGRO         = is.numeric(MA_AGRO),
    TI_MA_BOVINO       = is.numeric(MA_BOVINO),
    TI_MA_CANA         = is.numeric(MA_CANA),
    TI_MA_CFEM         = is.numeric(MA_CFEM),
    TI_MA_COMITE       = is.character(MA_COMITE),
    TI_MA_CRH          = is.numeric(MA_CRH),
    TI_VI_MA_FLONATIVA = is.numeric(MA_FLONATIVA),
    TI_MA_FMMA         = is.character(MA_FMMA),
    TI_MA_FOCOS        = is.numeric(MA_FOCOS),
    TI_MA_FROTA        = is.numeric(MA_FROTA),
    TI_MA_ICMSECOLOG   = is.numeric(MA_ICMSECOLOG),
    TI_MA_INFRA        = is.numeric(MA_INFRA),
    TI_MA_LEGISL       = is.character(MA_LEGISL),
    TI_MA_OGESTOR      = is.character(MA_OGESTOR),
    TI_MA_REFLO        = is.numeric(MA_REFLO)
)
```

```{r confront_type}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_type <- validate::confront(data, rules_type)

validate::summary(check_type) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |>
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_type}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_type, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

### Validade

#### Todos os indicadores - Valores ausentes

```{r rules_validate_na}

rules_validate_na <- validate::validator(
    VI_MA_AGRO       = !is.na(MA_AGRO),
    VI_MA_BOVINO     = !is.na(MA_BOVINO),
    VI_MA_CANA       = !is.na(MA_CANA),
    VI_MA_CFEM       = !is.na(MA_CFEM),
    VI_MA_COMITE     = !is.na(MA_COMITE),
    VI_MA_CRH        = !is.na(MA_CRH),
    VI_MA_FLONATIVA  = !is.na(MA_FLONATIVA),
    VI_MA_FOCOS      = !is.na(MA_FOCOS),
    VI_MA_INFRA      = !is.na(MA_INFRA),
    VI_MA_REFLO      = !is.na(MA_REFLO),
    VI_MA_FROTA      = !is.na(MA_FROTA),
    VI_MA_ICMSECOLOG = !is.na(MA_ICMSECOLOG)
  )
```

```{r confront_validate_na}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_validate_na <- validate::confront(data, rules_validate_na)

validate::summary(check_validate_na) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_validate_na}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_validate_na, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### Todos os indicadores - Demais regras

```{r rules_validate_others}

rules_validate_others <- validate::validator(
    VI_MA_AGRO       = in_range(MA_AGRO, min = 0, max = 100),
    VI_MA_BOVINO     = MA_BOVINO >= 0,
    VI_MA_CANA       = in_range(MA_CANA, min = 0, max = 100),
    VI_MA_CFEM       = MA_CFEM >= 0,
    VI_MA_COMITE     = MA_COMITE %in% c("Sim", "Não"),
    VI_MA_CRH        = MA_CRH >= 0,
    VI_MA_FLONATIVA  = in_range(MA_FLONATIVA, min = 0, max = 100),
    VI_MA_FMMA       = MA_FMMA %in% c("Sim", "Não"),
    VI_MA_FOCOS      = in_range(MA_FOCOS, min = 0, max = 100),
    VI_MA_FROTA      = MA_FROTA >= 0,
    VI_MA_ICMSECOLOG = MA_ICMSECOLOG >= 0,
    VI_MA_INFRA      = in_range(MA_INFRA, min = 0, max = 100),
    VI_MA_LEGISL     = MA_LEGISL %in% c("Sim", "Não"),
    VI_MA_OGESTOR    = MA_OGESTOR %in% org_gestor,
    VI_MA_REFLO      = in_range(MA_REFLO, min = 0, max = 100)
  )
```

```{r confront_validate_others}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_validate_others <- validate::confront(data, rules_validate_others)

validate::summary(check_validate_others) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_validate_others}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_validate_others, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

### Consistência

#### MA_ICMSECOLOG

```{r rules_consist_data_wrangling_ma_icmsecolog}

data_aux_ma_icmsecolog <- data |> 
  difpercentual(MA_ICMSECOLOG) |> 
  dplyr::select(IBGE7, ANO, dif_prop) |> 
  dplyr::right_join(data, by = dplyr::join_by(IBGE7, ANO)) |>  
  dplyr::select(IBGE7, ANO, MA_ICMSECOLOG, dif_prop)
```

```{r rules_consist_ma_icmsecolog}

rules_consist_ma_icmsecolog <- validate::validator(
  CF_MA_ICMSECOLOG_prop = in_range(dif_prop, min = -0.05, max = 0.05)
)
```

```{r show_consist_table_ma_icmsecolog}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_consist_ma_icmsecolog <- validate::confront(data_aux_ma_icmsecolog, rules_consist_ma_icmsecolog)

## Exibir uma tabela com os resultados
validate::summary(check_consist_ma_icmsecolog) |>
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r show_consist_chart_ma_icmsecolog}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_consist_ma_icmsecolog, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_CRH

```{r rules_consist_data_wrangling_ma_crh}

data_aux_ma_crh <- data |> 
  difpercentual(MA_CRH) |> 
  dplyr::select(IBGE7, ANO, dif_prop) |> 
  dplyr::right_join(data, by = dplyr::join_by(IBGE7, ANO)) |>  
  dplyr::select(IBGE7, ANO, MA_CRH, dif_prop)
```

```{r rules_consist_ma_crh}

rules_consist_ma_crh <- validate::validator(
  CF_MA_CRH_prop = in_range(dif_prop, min = -0.05, max = 0.05)
)
```

```{r show_consist_table_ma_crh}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_consist_ma_crh <- validate::confront(data_aux_ma_crh, rules_consist_ma_crh)

## Exibir uma tabela com os resultados
validate::summary(check_consist_ma_crh) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r show_consist_chart_ma_crh}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_consist_ma_crh, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_CFEM

```{r rules_consist_data_wrangling_ma_cfem}

data_aux_ma_cfem <- data |> 
  difpercentual(MA_CFEM) |> 
  dplyr::select(IBGE7, ANO, dif_prop) |> 
  dplyr::right_join(data, by = dplyr::join_by(IBGE7, ANO)) |>  
  dplyr::select(IBGE7, ANO, MA_CFEM, dif_prop)
```

```{r rules_consist_ma_cfem}

rules_consist_ma_cfem <- validate::validator(
  CF_MA_CFEM_prop = in_range(dif_prop, min = -0.05, max = 0.05)
)
```

```{r show_consist_table_ma_cfem}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_consist_ma_cfem <- validate::confront(data_aux_ma_cfem, rules_consist_ma_cfem)

## Exibir uma tabela com os resultados
validate::summary(check_consist_ma_cfem) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r show_consistency_chart_ma_cfem}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_consist_ma_cfem, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_FOCOS

```{r rules_consist_ma_focos}

rules_consist_ma_focos <- validate::validator(
  CF_MA_FOCOS_total = in_range(validate::sum_by(MA_FOCOS, by = ANO, na.rm = T), min = 99.5, max = 100.9)
)
```

```{r show_consist_table_ma_focos}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_consist_ma_focos <- validate::confront(data, rules_consist_ma_focos)

## Exibir uma tabela com os resultados
validate::summary(check_consist_ma_focos) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r show_consist_chart_ma_focos}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_consist_ma_focos, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

### Distribuição

#### MA_ICMSECOLOG

```{r rules_dist_ma_icmsecolog}

## Total
rules_dist_ma_icmsecolog <- validate::validator(
  DF_MA_ICMSECOLOG_hampel_munic  = validate::do_by(MA_ICMSECOLOG, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_ICMSECOLOG_out_munic     = validate::do_by(MA_ICMSECOLOG, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)

  DF_MA_ICMSECOLOG_min_munic     = MA_ICMSECOLOG >= (validate::min_by(lag(MA_ICMSECOLOG), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_ICMSECOLOG_max_munic     = MA_ICMSECOLOG <= (k * validate::max_by(lag(MA_ICMSECOLOG), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_ICMSECOLOG_med_mov_munic = MA_ICMSECOLOG <= (k * validate::do_by(MA_ICMSECOLOG, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_ICMSECOLOG_dif_munic     = validate::do_by(MA_ICMSECOLOG, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_icmsecolog}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_icmsecolog <- validate::confront(data, rules_dist_ma_icmsecolog) 

validate::summary(check_dist_ma_icmsecolog) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_icmsecolog}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_icmsecolog, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_CRH

```{r rules_dist_ma_crh}

## Outlier
rules_dist_ma_crh <- validate::validator(
  DF_MA_CRH_hampel_munic  = validate::do_by(MA_CRH, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_CRH_out_munic     = validate::do_by(MA_CRH, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_CRH_min_munic     = MA_CRH >= (validate::min_by(lag(MA_CRH), by = IBGE7, na.rm = T) / k), # Longitudinal (município)

  DF_MA_CRH_max_munic     = MA_CRH <= (k * validate::max_by(lag(MA_CRH), by = IBGE7, na.rm = T)), # Longitudinal (município)

  DF_MA_CRH_med_mov_munic = MA_CRH <= (k * validate::do_by(MA_CRH, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_CRH_dif_munic     = validate::do_by(MA_CRH, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_crh}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_crh <- validate::confront(data, rules_dist_ma_crh)

validate::summary(check_dist_ma_crh) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_crh}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_crh, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_CFEM

```{r rules_dist_ma_cefem}

## Outlier
rules_dist_ma_cfem <- validate::validator(
  DF_MA_CFEM_hampel_munic  = validate::do_by(MA_CFEM, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_CFEM_out_munic     = validate::do_by(MA_CFEM, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_CFEM_min_munic     = MA_CFEM >= (validate::min_by(lag(MA_CFEM), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_CFEM_max_munic     = MA_CFEM <= (k * validate::max_by(lag(MA_CFEM), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_CFEM_med_mov_munic = MA_CFEM <= (k * validate::do_by(MA_CFEM, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_CFEM_dif_munic     = validate::do_by(MA_CFEM, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_cfem}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_cfem <- validate::confront(data, rules_dist_ma_cfem)

validate::summary(check_dist_ma_cfem) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_cfem}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_cfem, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_FOCOS

```{r rules_dist_ma_focos}

## Proporção
rules_dist_ma_focos <- validate::validator(
  DF_MA_FOCOS_hampel_munic  = validate::do_by(MA_FOCOS, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_FOCOS_out_munic     = validate::do_by(MA_FOCOS, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_FOCOS_min_munic     = MA_FOCOS >= (validate::min_by(lag(MA_FOCOS), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_FOCOS_max_munic     = MA_FOCOS <= (k * validate::max_by(lag(MA_FOCOS), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_FOCOS_med_mov_munic = MA_FOCOS <= (k * validate::do_by(MA_FOCOS, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_FOCOS_dif_munic     = validate::do_by(MA_FOCOS, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_focos}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_focos <- validate::confront(data, rules_dist_ma_focos)

validate::summary(check_dist_ma_focos) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_focos}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_focos, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_CANA

```{r rules_dist_ma_cana}

## Proporção
rules_dist_ma_cana <- validate::validator(
  DF_MA_CANA_hampel_munic  = validate::do_by(MA_CANA, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_CANA_out_munic     = validate::do_by(MA_CANA, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_CANA_min_munic     = MA_CANA >= (validate::min_by(lag(MA_CANA), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_CANA_max_munic     = MA_CANA <= (k * validate::max_by(lag(MA_CANA), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_CANA_med_mov_munic = MA_CANA <= (k * validate::do_by(MA_CANA, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_CANA_dif_munic     = validate::do_by(MA_CANA, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_cana}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_cana <- validate::confront(data, rules_dist_ma_cana)

validate::summary(check_dist_ma_cana) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_cana}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_cana, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_FROTA

```{r rules_dist_ma_frota}

## Razão
rules_dist_ma_frota <- validate::validator(
  DF_MA_FROTA_hampel_munic  = validate::do_by(MA_FROTA, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_FROTA_out_munic     = validate::do_by(MA_FROTA, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_FROTA_min_munic     = MA_FROTA >= (validate::min_by(lag(MA_FROTA), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_FROTA_max_munic     = MA_FROTA <= (k * validate::max_by(lag(MA_FROTA), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_FROTA_med_mov_munic = MA_FROTA <= (k * validate::do_by(MA_FROTA, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_FROTA_dif_munic     = validate::do_by(MA_FROTA, by = IBGE7, fun = compare_first_dif) == F, # Longitudinal (município)
  
  DF_MA_FROTA_compare       = validate::do_by(MA_FROTA, by = IBGE7, fun = compare_lag) == T # Longitudinal (município) [comparação]
)
```

```{r confront_dist_ma_frota}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_frota <- validate::confront(data, rules_dist_ma_frota)

## Exibir uma tabela com os resultados
validate::summary(check_dist_ma_frota) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_frota}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_frota, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_BOVINO

```{r rules_dist_ma_bovino}

## Razão
rules_dist_ma_bovino <- validate::validator(
  DF_MA_BOVINO_hampel_munic  = validate::do_by(MA_BOVINO, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_BOVINO_out_munic     = validate::do_by(MA_BOVINO, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_BOVINO_min_munic     = MA_BOVINO >= (validate::min_by(lag(MA_BOVINO), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_BOVINO_max_munic     = MA_BOVINO <= (k * validate::max_by(lag(MA_BOVINO), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_BOVINO_med_mov_munic = MA_BOVINO <= (k * validate::do_by(MA_BOVINO, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_BOVINO_dif_munic     = validate::do_by(MA_BOVINO, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_bovino}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_bovino <- validate::confront(data, rules_dist_ma_bovino)

validate::summary(check_dist_ma_bovino) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_bovino}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_bovino, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_REFLO

```{r rules_dist_ma_reflo}

## Proporção
rules_dist_ma_reflo <- validate::validator(
  DF_MA_REFLO_hampel_munic  = validate::do_by(MA_REFLO, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_REFLO_out_munic     = validate::do_by(MA_REFLO, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_REFLO_min_munic     = MA_REFLO >= (validate::min_by(lag(MA_REFLO), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_REFLO_max_munic     = MA_REFLO <= (k * validate::max_by(lag(MA_REFLO), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_REFLO_med_mov_munic = MA_REFLO <= (k * validate::do_by(MA_REFLO, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_REFLO_dif_munic     = validate::do_by(MA_REFLO, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_reflo}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_reflo <- validate::confront(data, rules_dist_ma_reflo)

validate::summary(check_dist_ma_reflo) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_reflo}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_reflo, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_FLONATIVA

```{r rules_dist_ma_flonativa}

## Proporção
rules_dist_ma_flonativa <- validate::validator(
  DF_MA_FLONATIVA_hampel_munic  = validate::do_by(MA_FLONATIVA, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_FLONATIVA_out_munic     = validate::do_by(MA_FLONATIVA, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_FLONATIVA_min_munic     = MA_FLONATIVA >= (validate::min_by(lag(MA_FLONATIVA), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_FLONATIVA_max_munic     = MA_FLONATIVA <= (k * validate::max_by(lag(MA_FLONATIVA), by = IBGE7, na.rm = T)), # Longitudinal (município)
   
  DF_MA_FLONATIVA_med_mov_munic = MA_FLONATIVA <= (k * validate::do_by(MA_FLONATIVA, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_FLONATIVA_dif_munic     = validate::do_by(MA_FLONATIVA, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_flonativa}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_flonativa <- validate::confront(data, rules_dist_ma_flonativa)

validate::summary(check_dist_ma_flonativa) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_flonativa}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_flonativa, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_INFRA

```{r rules_dist_ma_infra}

## Proporção
rules_dist_ma_infra <- validate::validator(
  DF_MA_INFRA_hampel_munic  = validate::do_by(MA_INFRA, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_INFRA_out_munic     = validate::do_by(MA_INFRA, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_INFRA_min_munic     = MA_INFRA >= (validate::min_by(lag(MA_INFRA), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_INFRA_max_munic     = MA_INFRA <= (k * validate::max_by(lag(MA_INFRA), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_INFRA_med_mov_munic = MA_INFRA <= (k * validate::do_by(MA_INFRA, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_INFRA_dif_munic     = validate::do_by(MA_INFRA, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_infra}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_infra <- validate::confront(data, rules_dist_ma_infra)

validate::summary(check_dist_ma_infra) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_infra}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_infra, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

#### MA_AGRO

```{r rules_dist_ma_agro}

## Proporção
rules_dist_ma_agro <- validate::validator(
  DF_MA_AGRO_hampel_munic  = validate::do_by(MA_AGRO, by = IBGE7, fun = hampel_filter) == F, # Longitudinal (município)
  
  DF_MA_AGRO_out_munic     = validate::do_by(MA_AGRO, by = IBGE7, fun = outlier_detection) == F, # Longitudinal (município)
  
  DF_MA_AGRO_min_munic     = MA_AGRO >= (validate::min_by(lag(MA_AGRO), by = IBGE7, na.rm = T) / k), # Longitudinal (município)
  
  DF_MA_AGRO_max_munic     = MA_AGRO <= (k * validate::max_by(lag(MA_AGRO), by = IBGE7, na.rm = T)), # Longitudinal (município)
  
  DF_MA_AGRO_med_mov_munic = MA_AGRO <= (k * validate::do_by(MA_AGRO, by = IBGE7, fun = zoo::rollmedian, k = 3, fill = NA, align = "right")), # Longitudinal (município)
  
  DF_MA_AGRO_dif_munic     = validate::do_by(MA_AGRO, by = IBGE7, fun = compare_first_dif) == F # Longitudinal (município)
)
```

```{r confront_dist_ma_agro}

## Confrontar os dados com as regras e exibir uma tabela com os resultados
check_dist_ma_agro <- validate::confront(data, rules_dist_ma_agro)

validate::summary(check_dist_ma_agro) |> 
  dplyr::select(
    Regra         = name,
    `Observações` = items,
    Sucessos      = passes,
    Erros         = fails,
    Missing       = nNA
  ) |> 
  kableExtra::kbl(format.args = list(big.mark = ".", decimal.mark = ",")) |> 
  kableExtra::kable_paper("hover", full_width = F)
```

```{r chart_dist_ma_agro}
#| out-width: 100%

## Gráfico com os resultados
validate::plot(check_dist_ma_agro, title = chart_title, labels = chart_label, fill = chart_palette, xlab = chart_xlab)
```

# Análise descritiva

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sollicitudin, metus nec rhoncus posuere, leo dolor auctor neque, ut consectetur massa sem et nibh. Vivamus aliquam arcu sed ligula tincidunt, vel iaculis felis accumsan. Fusce in pellentesque erat. In vel euismod justo. Suspendisse imperdiet nulla eget dolor ornare, in viverra massa congue. Suspendisse nec vestibulum lectus. Phasellus venenatis vel turpis ut finibus. Vivamus vehicula neque sem, at ullamcorper magna finibus at. Praesent pulvinar, enim id pellentesque ultricies, magna nibh suscipit magna, at viverra dolor neque vel dolor. Quisque vestibulum orci et ex pharetra, vitae feugiat nulla sollicitudin. Suspendisse posuere aliquet.

## Tabelas

```{r show_desc_table, results='asis'}
#| column: screen-inset-right

pander::pandoc.header("Descritiva", level = 3)

# Loop para mostrar os resultados por variável
for(var in var_numeric){
  pander::pandoc.header(var, level = 4)
  pander::pandoc.table(
    table_descriptive(var), 
    decimal.mark = ",", 
    big.mark     = ".", 
    round        = 2,
    split.table  = Inf
  )
  cat("\\pagebreak\n")
}
```

```{r show_qtl_table, results='asis'}

pander::pandoc.header("Quantil", level = 3)

# Loop para mostrar os resultados por variável
for(var in var_numeric){
  pander::pandoc.header(var, level = 4)
  pander::pandoc.table(
    table_quantile(var), 
    decimal.mark = ",", 
    big.mark     = ".", 
    round        = 2, 
    split.table  = Inf
  )
  cat("\\pagebreak\n")
}
```

## Gráficos

::: {.callout-note appearance="minimal"}
Observação: os gráficos abaixo são mostrados na escala logarítmica para facilitar a visualização dos dados em certos casos. Para conferir os valores reais, consultar as tabelas descritivas.
:::

```{r show_boxplot_chart, results='asis'}
#| out-width: 100%
#| fig-format: svg

pander::pandoc.header("Gráfico de caixa (boxplot)", level = 3)

# Loop para mostrar os resultados por variável
for(var in var_numeric){
  pander::pandoc.header(var, level = 4)
  print(chart_boxplot(var))
  cat("\\pagebreak\n")
}
```

```{r show_hist_chart, results='asis'}
#| out-width: 100%
#| fig-format: svg

pander::pandoc.header("Histograma", level = 3)

# Loop para mostrar os resultados por variável
for(var in var_numeric){
  pander::pandoc.header(var, level = 4)
  print(chart_histogram(var))
  cat("\\pagebreak\n")
}
```

```{r df_viol_build}

# Criar base com as observações que violaram uma ou mais regras

## Consistência
data_viol_consist_export <- dplyr::select(validate::violating(data, rules_consist_ma_focos), ANO, IBGE7, MA_FOCOS) |> 
  dplyr::arrange(ANO, IBGE7)

## Distribuição
data_viol_dist_export <- dplyr::select(validate::violating(data, rules_dist_ma_icmsecolog), ANO, IBGE7, MA_ICMSECOLOG) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_crh), ANO, IBGE7, MA_CRH), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_cfem), ANO, IBGE7, MA_CFEM), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_focos), ANO, IBGE7, MA_FOCOS), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_cana), ANO, IBGE7, MA_CANA), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_frota), ANO, IBGE7,MA_FROTA), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_bovino), ANO, IBGE7, MA_BOVINO), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_reflo), ANO, IBGE7, MA_REFLO), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_flonativa), ANO, IBGE7, MA_FLONATIVA), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_infra), ANO, IBGE7, MA_INFRA), by = dplyr::join_by(ANO, IBGE7)) |> 
dplyr::full_join(dplyr::select(validate::violating(data, rules_dist_ma_agro), ANO, IBGE7, MA_AGRO), by = dplyr::join_by(ANO, IBGE7)) |> 
  dplyr::arrange(ANO, IBGE7)
```

```{r df_viol_export}

# Exportar base com as observações que violaram uma ou mais regras
pt <- openxlsx::createWorkbook()

openxlsx::addWorksheet(pt, "Regra consistência")
openxlsx::addWorksheet(pt, "Regra distribuição")

openxlsx::writeData(pt, "Regra consistência", data_viol_consist_export)
openxlsx::writeData(pt, "Regra distribuição", data_viol_dist_export)

openxlsx::saveWorkbook(pt, "fjpdados_meioambiente_violacoes.xlsx", overwrite = T)
```
